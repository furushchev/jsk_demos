<launch>
  <arg name="use_throttle" default="false" />


  <arg name="camera" default="kinect_head_external" />
  <arg name="throttle_prefix"     if="$(arg use_throttle)" default="throttled/" />
  <arg name="throttle_prefix" unless="$(arg use_throttle)" default="" />

  <arg name="input_cloud" default="/$(arg camera)/depth_registered/$(arg throttle_prefix)points" />
  <arg name="input_image" default="/$(arg camera)/rgb/$(arg throttle_prefix)image_rect_color" />
  <arg name="input_camera_info" default="/$(arg camera)/depth_registered/$(arg throttle_prefix)camera_info" />

  <arg name="vital_rate" default="0.1" />
  <arg name="respawn" default="true" />
  <arg name="machine" default="external" />

  <arg name="base_frame_id" default="base_link" />
  <arg name="sensor_frame_id" default="head_mount_kinect_rgb_optical_frame" />

  <include file="$(find jsk_2017_home_butler)/pr2.machine" />

  <group ns="tabletop">
    <node name="manager"
          pkg="jsk_topic_tools" type="standalone_complexed_nodelet"
          output="screen" respawn="$(arg respawn)"
          machine="$(arg machine)">
      <rosparam subst_value="true">
        nodelets:
        - name: input_relay
          type: jsk_topic_tools/LightweightThrottle
          remappings:
          - from: ~input
            to: $(arg input_cloud)
        - name: attention_clipper
          type: jsk_pcl/AttentionClipper
          remappings:
          - from: ~input/points
            to: input_relay/output
        - name: attention_clipper_decomposer
          type: jsk_pcl/ExtractIndices
          remappings:
          - from: ~input
            to: input_relay/output
          - from: ~indices
            to: attention_clipper/output/point_indices
        - name: multi_plane_segmentation
          type: jsk_pcl/OrganizedMultiPlaneSegmentation
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
        - name: plane_reasoner
          type: jsk_pcl_utils/PlaneReasoner
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~input_inliers
            to: multi_plane_segmentation/output_refined
          - from: ~input_polygons
            to: multi_plane_segmentation/output_refined_polygon
          - from: ~input_coefficients
            to: multi_plane_segmentation/output_refined_coefficients
        - name: plane_reasoner_decomposer
          type: jsk_pcl/ClusterPointIndicesDecomposer
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~target
            to: plane_reasoner/output/horizontal/inliers
          - from: ~align_planes
            to: plane_reasoner/output/horizontal/polygons
          - from: ~align_planes_coefficients
            to: plane_reasoner/output/horizontal/coefficients
        - name: plane_concatenator
          type: jsk_pcl_utils/PlaneConcatenator
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~input/indices
            to: plane_reasoner/output/horizontal/inliers
          - from: ~input/polygons
            to: plane_reasoner/output/horizontal/polygons
          - from: ~input/coefficients
            to: plane_reasoner/output/horizontal/coefficients
        - name: polygon_magnifier
          type: jsk_pcl_utils/PolygonMagnifier
          remappings:
          - from: ~input
            to: plane_concatenator/output/polygons
        - name: plane_extraction
          type: jsk_pcl/MultiPlaneExtraction
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~indices
            to: plane_concatenator/output/indices
          - from: ~input_polygons
            to: polygon_magnifier/output
          - from: ~input_coefficients
            to: plane_concatenator/output/coefficients
        - name: euclidean_clustering
          type: jsk_pcl/EuclideanClustering
          remappings:
          - from: ~input
            to: plane_extraction/output
        - name: euclidean_clustering_decomposer
          type: jsk_pcl/ClusterPointIndicesDecomposer
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~target
            to: euclidean_clustering/output
          - from: ~align_planes
            to: polygon_magnifier/output
          - from: ~align_planes_coefficients
            to: plane_concatenator/output/coefficients
        - name: bounding_box_to_rect
          type: jsk_perception/BoundingBoxToRect
          remappings:
          - from: ~input
            to: euclidean_clustering_decomposer/boxes
          - from: ~input/info
            to: $(arg input_camera_info)
        - name: draw_rects
          type: jsk_perception/DrawRects
          remappings:
          - from: ~input
            to: $(arg input_image)
          - from: ~input/rects
            to: bounding_box_to_rect/output
        - name: primitive_shape_classifier
          type: jsk_pcl/PrimitiveShapeClassifier
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~input/normal
            to: multi_plane_segmentation/output_normal
          - from: ~input/indices
            to: euclidean_clustering/output
          - from: ~input/polygons
            to: polygon_magnifier/output
        - name: color_histogram
          type: jsk_pcl/ColorHistogram
          remappings:
          - from: ~input
            to: attention_clipper_decomposer/output
          - from: ~input/indices
            to: euclidean_clustering/output
      </rosparam>
    </node>

    <node name="volume_classifier"
          pkg="jsk_2017_home_butler" type="volume_classifier.py"
          machine="$(arg machine)">
      <remap from="~input" to="euclidean_clustering_decomposer/boxes"/>
      <rosparam>
        tall_threshold: 0.6
        big_threshold: 0.00027
      </rosparam>
    </node>

    <node name="color_histogram_classifier"
          pkg="jsk_2017_home_butler" type="color_histogram_classifier.py"
          machine="$(arg machine)">
      <remap from="~input" to="color_histogram/output" />
    </node>

    <rosparam subst_value="true"
              ns="input_relay">
      update_rate: 5.0
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="attention_clipper">
      dimension_x: 1.0
      dimension_y: 1.0
      dimension_z: 0.5
      frame_id: $(arg base_frame_id)
      initial_pos: [0.9, 0, 0.7]
    </rosparam>

    <rosparam subst_value="true"
              ns="attention_clipper_decomposer">
      keep_organized: true
      max_queue_size: 100
    </rosparam>

    <rosparam subst_value="true"
              ns="multi_plane_segmentation">
      min_size: 1000
      max_curvature: 0.01
      estimate_normal: true
      publish_normal: true
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="plane_reasoner">
      global_frame_id: $(arg base_frame_id)
      horizontal_angular_threshold: 0.2
      vertical_angular_threshold: 0.1
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="plane_reasoner_decomposer">
      queue_size: 100
      publish_clouds: false
      publish_tf: false
      align_boxes: true
      align_boxes_with_plane: true
      use_pca: true
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="plane_concatenator">
      connect_angular_threshold: 0.1
      connect_distance_threshold: 0.1
      min_size: 100
      min_area: 0.1
      max_area: 1.0
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="polygon_magnifier">
      use_scale_factor: true
      magnify_scale_factor: 0.9
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="plane_extraction">
      use_sensor_frame: true
      sensor_frame: $(arg sensor_frame_id)
      min_height: 0.01
      max_height: 0.10
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="euclidean_clustering">
      tolerance: 0.005
      min_size: 100
      max_size: 2000000
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="euclidean_clustering_decomposer">
      queue_size: 100
      publish_clouds: false
      publish_tf: false
      align_boxes: true
      align_boxes_with_plane: false
      target_frame_id: $(arg base_frame_id)
      use_pca: true
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="bounding_box_to_rect">
      queue_size: 100
      approximate_sync: true
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="primitive_shape_classifier">
      box_threshold: 0.0
      circle_threshold: 0.5
      vital_rate: $(arg vital_rate)
    </rosparam>

    <rosparam subst_value="true"
              ns="color_histogram">
      bin_size: 10
      histogram_policy: 0
      white_threshold: 0.3
      black_threshold: 0.04
      vital_rate: $(arg vital_rate)
    </rosparam>

    <!-- visualizer -->
    <rosparam subst_value="true" ns="draw_rects">
      approximate_sync: true
      queue_size: 100
    </rosparam>

    <node name="primitive_class_vis"
          pkg="jsk_rviz_plugins" type="classification_result_visualizer.py" machine="$(arg machine)">
      <remap from="~input/boxes" to="euclidean_clustering_decomposer/boxes"/>
      <remap from="~input/classes" to="primitive_shape_classifier/output" />
      <rosparam>
        text_color_red: 1.0
        text_color_green: 0.0
        text_color_blue: 0.0
        text_offset_y: -0.09
        text_size: 0.05
      </rosparam>
    </node>

    <node name="color_hist_vis"
          pkg="jsk_pcl_ros" type="color_histogram_visualizer.py" machine="$(arg machine)">
      <remap from="~input/array" to="color_histogram/output" />
      <rosparam>
        histogram_policy: 0
        histogram_index: 1
      </rosparam>
    </node>

    <node name="color_class_vis"
          pkg="jsk_rviz_plugins" type="classification_result_visualizer.py" machine="$(arg machine)">
      <remap from="~input/boxes" to="euclidean_clustering_decomposer/boxes"/>
      <remap from="~input/classes" to="color_histogram_classifier/output" />
      <rosparam>
        text_color_red: 0.0
        text_color_green: 1.0
        text_color_blue: 0.0
        text_offset_y: -0.05
        text_size: 0.05
      </rosparam>
    </node>

    <node name="volume_class_vis"
          pkg="jsk_rviz_plugins" type="classification_result_visualizer.py" machine="$(arg machine)">
      <remap from="~input/boxes" to="euclidean_clustering_decomposer/boxes"/>
      <remap from="~input/classes" to="volume_classifier/output" />
      <rosparam>
        text_color_red: 0.0
        text_color_green: 0.0
        text_color_blue: 1.0
        text_offset_y: -0.12
        text_size: 0.05
      </rosparam>
    </node>
  </group>
</launch>
